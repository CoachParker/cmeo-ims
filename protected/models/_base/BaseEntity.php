<?php

/**
 * This is the model base class for the table "entity".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Entity".
 *
 * Columns in table "entity" available as properties of the model,
 * followed by relations of table "entity" available as properties of the model.
 *
 * @property integer $idEntity
 * @property string $name
 * @property integer $entityTypeId
 * @property string $address1
 * @property string $address2
 * @property string $city
 * @property string $state
 * @property string $zip
 * @property string $phone
 * @property string $comments
 *
 * @property Donation[] $donations
 * @property EntityType $entityType
 * @property EntityPerson[] $entityPeople
 * @property Event[] $events
 * @property Membership[] $memberships
 * @property Visit[] $visits
 */
abstract class BaseEntity extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'entity';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Entity|Entities', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, entityTypeId', 'required'),
			array('entityTypeId', 'numerical', 'integerOnly'=>true),
			array('name, city', 'length', 'max'=>45),
			array('address1, address2', 'length', 'max'=>80),
			array('state', 'length', 'max'=>2),
			array('zip', 'length', 'max'=>10),
			array('phone', 'length', 'max'=>17),
			array('comments', 'safe'),
			array('address1, address2, city, state, zip, phone, comments', 'default', 'setOnEmpty' => true, 'value' => null),
			array('idEntity, name, entityTypeId, address1, address2, city, state, zip, phone, comments', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'donations' => array(self::HAS_MANY, 'Donation', 'entityId'),
			'entityType' => array(self::BELONGS_TO, 'EntityType', 'entityTypeId'),
			'entityPeople' => array(self::HAS_MANY, 'EntityPerson', 'entityId'),
			'events' => array(self::HAS_MANY, 'Event', 'sponsoringEntityId'),
			'memberships' => array(self::HAS_MANY, 'Membership', 'entityId'),
			'visits' => array(self::HAS_MANY, 'Visit', 'entityId'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'idEntity' => Yii::t('app', 'Id Entity'),
			'name' => Yii::t('app', 'Name'),
			'entityTypeId' => null,
			'address1' => Yii::t('app', 'Address1'),
			'address2' => Yii::t('app', 'Address2'),
			'city' => Yii::t('app', 'City'),
			'state' => Yii::t('app', 'State'),
			'zip' => Yii::t('app', 'Zip'),
			'phone' => Yii::t('app', 'Phone'),
			'comments' => Yii::t('app', 'Comments'),
			'donations' => null,
			'entityType' => null,
			'entityPeople' => null,
			'events' => null,
			'memberships' => null,
			'visits' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('idEntity', $this->idEntity);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('entityTypeId', $this->entityTypeId);
		$criteria->compare('address1', $this->address1, true);
		$criteria->compare('address2', $this->address2, true);
		$criteria->compare('city', $this->city, true);
		$criteria->compare('state', $this->state, true);
		$criteria->compare('zip', $this->zip, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('comments', $this->comments, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}