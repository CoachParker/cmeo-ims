<?php

/**
 * This is the model class for table "event".
 *
 * The followings are the available columns in table 'event':
 * @property integer $idEvent
 * @property string $name
 * @property string $eventDate
 * @property string $endDate
 * @property string $recurrence
 * @property integer $classLimit
 * @property string $description
 * @property integer $ageGroupId
 * @property integer $eventTypeId
 * @property string $notes
 * @property integer $sponsorEntityId
 * @property integer $facilitatorPersonId
 *
 * The followings are the available model relations:
 * @property EventType $eventType
 * @property AgeGroup $ageGroup
 * @property Person $facilitatorPerson
 * @property Entity $sponsorEntity
 * @property EventAttribute[] $eventAttributes - autogenerated, not correct
 * @property AttributeValues[] $attributeValues
 * @property Visit[] $visits
 */
class Event extends CActiveRecord
{
	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'event';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
                        array('name, ageGroup', 'required'),
			array('classLimit, ageGroupId, eventTypeId, sponsorEntityId, facilitatorPersonId', 'numerical', 'integerOnly'=>true),
			array('name, recurrence', 'length', 'max'=>45),
			array('eventDate, endDate, description, notes, visits, attributeValues', 'safe'),
			// The following rule is used by search().
			// @todo Please remove those attributes that should not be searched.
			array('idEvent, name, eventDate, endDate, recurrence, classLimit, description, ageGroupId, eventTypeId, notes, sponsorEntityId, facilitatorPersonId', 'safe', 'on'=>'search'),
		);
	}
        
        public function behaviors() {
            return array( 'CAdvancedArBehavior' => array(
            'class' => 'CAdvancedArBehavior'));
        }
        

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
			'eventType' => array(self::BELONGS_TO, 'EventType', 'eventTypeId'),
			'ageGroup' => array(self::BELONGS_TO, 'AgeGroup', 'ageGroupId'),
			'facilitatorPerson' => array(self::BELONGS_TO, 'Person', 'facilitatorPersonId'),
			'sponsorEntity' => array(self::BELONGS_TO, 'Entity', 'sponsorEntityId'),
//			'eventAttributes' => array(self::MANY_MANY, 'EventAttribute', 'eventAttribteValue(eventId, eventAttribteId)'),
			'attributeValues' => array(self::HAS_MANY, 'EventAttributeValue', 'eventId'),
			'visits' => array(self::HAS_MANY, 'Visit', 'destinationEventId'),
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'idEvent' => 'Id Event',
			'name' => 'Name',
			'eventDate' => 'Event Date',
			'endDate' => 'End Date',
			'recurrence' => 'Recurrence',
			'classLimit' => 'Class Limit',
			'description' => 'Description',
			'ageGroupId' => 'Age Group',
			'eventTypeId' => 'Event Type',
			'notes' => 'Notes',
			'sponsorEntityId' => 'Sponsor Entity',
			'facilitatorPersonId' => 'Facilitator Person',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 *
	 * Typical usecase:
	 * - Initialize the model fields with values from filter form.
	 * - Execute this method to get CActiveDataProvider instance which will filter
	 * models according to data in model fields.
	 * - Pass data provider to CGridView, CListView or any similar widget.
	 *
	 * @return CActiveDataProvider the data provider that can return the models
	 * based on the search/filter conditions.
	 */
	public function search()
	{
		// @todo Please modify the following code to remove attributes that should not be searched.

		$criteria=new CDbCriteria;

		$criteria->compare('idEvent',$this->idEvent);
		$criteria->compare('name',$this->name,true);
		$criteria->compare('eventDate',$this->eventDate,true);
		$criteria->compare('endDate',$this->endDate,true);
		$criteria->compare('recurrence',$this->recurrence,true);
		$criteria->compare('classLimit',$this->classLimit);
		$criteria->compare('description',$this->description,true);
		$criteria->compare('ageGroupId',$this->ageGroupId);
		$criteria->compare('eventTypeId',$this->eventTypeId);
		$criteria->compare('notes',$this->notes,true);
		$criteria->compare('sponsorEntityId',$this->sponsorEntityId);
		$criteria->compare('facilitatorPersonId',$this->facilitatorPersonId);

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}

	/**
	 * Returns the static model of the specified AR class.
	 * Please note that you should have this exact method in all your CActiveRecord descendants!
	 * @param string $className active record class name.
	 * @return Event the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	/*
	 *  If there is no facilitator, set to none
	 */
	public function getPerson()
	{
	  $result=array();
	  If (count($this->facilitatorPerson) > 0)
	    {
              $result[] = $this->facilitatorPerson->firstName;
              $result[] = $this->facilitatorPerson->lastName;
	    }
	    else
	      {
		$result[] = "none";
	      }
              return implode(" ",$result);
	}
/*  Get attributes related to eventType 
 * 
 */
        public function getAttribtuteList()
        {
            $result=array();
            If ($this->attributeValues){
                foreach ($this->attributeValues as $attribute){
                    $result[] = CHtml::encode($attribute->eventAttributeId) . ":" . CHtml::encode($attribute->value);
                }
            }
            else{
                $result[] = "No additional attributes";
            }
        return implode(", ",$result);
        }

/*
 * Devin's code for viewing attributes and values
 * 2013-11-05
 */     
        public function getAttributesValues()
        {
            $descriptions = array();
            $attributes = array();
            foreach($this->eventType->eventAttributes as $attr){
                $descriptions[$attr->idEventAttribute] = $attr->displayName;
                
            }
            foreach($this->attributeValues as $attr){
                $id = $attr->eventAttributeId;
                $value = $attr->value;
                if ($descriptions[$id]){
                    $attributes[] = array( 'label' => $descriptions[$id], 'value' => $value);
                    
                }       
                }	
                return $attributes;
        }
            }
