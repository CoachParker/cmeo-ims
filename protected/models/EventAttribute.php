<?php

/**
 * This is the model class for table "eventAttribute".
 *
 * The followings are the available columns in table 'eventAttribute':
 * @property integer $idEventAttribute
 * @property string $attribute
 * @property string $displayName
 * @property string $description
 * @property string $valueType
 *
 * The followings are the available model relations:
 * @property Event[] $events - autogenerated, not correct
 * @property Values[] $values
 * @property EventType[] $eventTypes
 */
class EventAttribute extends CActiveRecord
{
	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'eventAttribute';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			array('attribute, displayName, description, valueType', 'length', 'max'=>45),
                        array('eventTypes', 'safe'),
			// The following rule is used by search().
			// @todo Please remove those attributes that should not be searched.
			array('idEventAttribute, attribute, displayName, description, valueType, eventTypes', 'safe', 'on'=>'search'),
		);
	}

        public function behaviors() {
            return array( 'CAdvancedArBehavior' => array(
            'class' => 'CAdvancedArBehavior'));
        }
	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
//			'events' => array(self::MANY_MANY, 'Event', 'eventAttributeValue(eventAttributeId, eventId)'),
			'values' => array(self::HAS_MANY, 'EventAttributeValue', 'eventAttributeId'),
			'eventTypes' => array(self::MANY_MANY, 'EventType', 'eventTypeAttribute(eventAttributeId, eventTypeId)'),
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'idEventAttribute' => 'Id Event Attribute',
			'attribute' => 'Attribute',
			'displayName' => 'Display Name',
			'description' => 'Description',
			'valueType' => 'Value Type',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 *
	 * Typical usecase:
	 * - Initialize the model fields with values from filter form.
	 * - Execute this method to get CActiveDataProvider instance which will filter
	 * models according to data in model fields.
	 * - Pass data provider to CGridView, CListView or any similar widget.
	 *
	 * @return CActiveDataProvider the data provider that can return the models
	 * based on the search/filter conditions.
	 */
	public function search()
	{
		// @todo Please modify the following code to remove attributes that should not be searched.

		$criteria=new CDbCriteria;

		$criteria->compare('idEventAttribute',$this->idEventAttribute);
		$criteria->compare('attribute',$this->attribute,true);
		$criteria->compare('displayName',$this->displayName,true);
		$criteria->compare('description',$this->description,true);
		$criteria->compare('valueType',$this->valueType,true);

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}

	/**
	 * Returns the static model of the specified AR class.
	 * Please note that you should have this exact method in all your CActiveRecord descendants!
	 * @param string $className active record class name.
	 * @return EventAttribute the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}
}
